{"version":3,"sources":["ItemInput.js","item-panel/Items.js","item-panel/useItems.js","item-panel/index.js","App.js","serviceWorker.js","index.js"],"names":["ItemInput","_ref","addItem","_useState","useState","_useState2","Object","slicedToArray","item","setItem","react_default","a","createElement","className","value","type","placeholder","onChange","e","target","onClick","event","Items","_ref$items","items","deleteItem","map","idx","key","itemReducer","draft","action","push","payload","arguments","length","undefined","initItems","Error","useItems","initialState","_useImmerReducer","useImmerReducer","_useImmerReducer2","state","dispatch","ItemPanel","item_panel_Items","App","_useItems","_useItems2","react","src_ItemInput","item_panel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAiCeA,EA9BG,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QAAcC,EACTC,mBAAS,IADAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1BK,EAD0BH,EAAA,GACpBI,EADoBJ,EAAA,GAOjC,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,6BACVC,MAAON,EACPO,KAAK,OACLC,YAAY,mBACZC,SAAU,SAAAC,GAAC,OAAIT,EAAQS,EAAEC,OAAOL,UAGlCJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBO,QAhB3B,SAAAC,GACfnB,EAAQM,GACRC,EAAQ,MAcJ,UCFOa,EAhBD,SAAArB,GAAA,IAAAsB,EAAAtB,EAAGuB,aAAH,IAAAD,EAAW,GAAXA,EAAAtB,EAAewB,WAAf,OACZf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZW,EAAME,IAAI,SAAClB,EAAMmB,GAAP,OACTjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYe,IAAKD,GAC7B,IACAnB,cCHHqB,QAAc,SAACC,EAAOC,GAE1B,OAAQA,EAAOhB,MACb,IAAK,MACH,YAAYe,EAAMN,MAAMQ,KAAKD,EAAOE,SAEtC,IAAK,SAEL,IAAK,QACH,OAXY,iBAAiB,CAAET,MAAnBU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAS,IAWdG,CAAUN,EAAOE,SAC1B,QACE,MAAM,IAAIK,SAmBDC,EAfE,SAAAC,GAAgB,IAAAC,EACLC,YAAgBb,EAAa,CAAEL,MAAO,KADjCmB,EAAArC,OAAAC,EAAA,EAAAD,CAAAmC,EAAA,GACxBG,EADwBD,EAAA,GACjBE,EADiBF,EAAA,GAY/B,MAAO,CAVWC,EAAVpB,MAMW,SAAAhB,GACjBqC,EAAS,CAAE9B,KAAM,SAAUkB,QAASzB,KALtB,SAAAA,GACdqC,EAAS,CAAE9B,KAAM,MAAOkB,QAASzB,OCFtBsC,EAlBG,SAAA7C,GAAA,IAAGuB,EAAHvB,EAAGuB,MAAOC,EAAVxB,EAAUwB,WAAV,OAChBf,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,oBACkB,IAAjBW,EAAMW,OACLzB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,uBAEAH,EAAAC,EAAAC,cAACmC,EAAU,CAAEvB,QAAOC,kBCObuB,EAfH,WAAM,IAAAC,EACqBV,IADrBW,EAAA5C,OAAAC,EAAA,EAAAD,CAAA2C,EAAA,GACTzB,EADS0B,EAAA,GACFzB,EADEyB,EAAA,GACUhD,EADVgD,EAAA,GAEhB,OACExC,EAAAC,EAAAC,cAACuC,EAAA,SAAD,KACEzC,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,wBACAH,EAAAC,EAAAC,cAACwC,EAAc,CAAElD,cAGrBQ,EAAAC,EAAAC,cAACyC,EAAc,CAAE7B,QAAOC,iBCFV6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bba9920f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ItemInput = ({ addItem }) => {\n  const [item, setItem] = useState('')\n  const saveItem = event => {\n    addItem(item)\n    setItem('')\n  }\n\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input\n          className=\"input is-primary is-medium\"\n          value={item}\n          type=\"text\"\n          placeholder=\"Enter your thing\"\n          onChange={e => setItem(e.target.value)}\n        />\n\n        <button className=\"button is-primary\" onClick={saveItem}>\n          Add\n        </button>\n      </div>\n    </div>\n  )\n}\n\nItemInput.propTypes = {\n  addItem: PropTypes.func.isRequired,\n}\n\nexport default ItemInput\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Items = ({ items = [], deleteItem }) => (\n  <div className=\"list\">\n    {items.map((item, idx) => (\n      <div className=\"list-item\" key={idx}>\n        {' '}\n        {item}\n      </div>\n    ))}\n  </div>\n)\n\nItems.propTypes = {\n  items: PropTypes.array.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n}\n\nexport default Items\n","import { useImmerReducer } from 'use-immer'\nimport produce from 'immer'\n\nconst initItems = (items = []) => ({ items })\n\nconst itemReducer = (draft, action) => {\n  // const { items } = state\n  switch (action.type) {\n    case 'add':\n      return void draft.items.push(action.payload)\n    // return { items: items.concat() }\n    case 'delete':\n    // return { items: items.filter(item => item !== action.payload) }\n    case 'reset':\n      return initItems(action.payload)\n    default:\n      throw new Error()\n  }\n}\n\nconst useItems = initialState => {\n  const [state, dispatch] = useImmerReducer(itemReducer, { items: [] })\n  const { items } = state\n\n  const addItem = item => {\n    dispatch({ type: 'add', payload: item })\n  }\n\n  const deleteItem = item => {\n    dispatch({ type: 'delete', payload: item })\n  }\n\n  return [items, deleteItem, addItem]\n}\n\nexport default useItems\n","import React from 'react'\nimport Items from './Items'\nimport PropTypes from 'prop-types'\nexport { default as useItems } from './useItems'\n\nconst ItemPanel = ({ items, deleteItem }) => (\n  <section className=\"section\">\n    <div className=\"container\">\n      <h2 className=\"title is-2\">Your things here</h2>\n      {items.length === 0 ? (\n        <h3 className=\"title is-3\">You have no things.</h3>\n      ) : (\n        <Items {...{ items, deleteItem }} />\n      )}\n    </div>\n  </section>\n)\n\nItemPanel.propTypes = {\n  items: PropTypes.array.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n}\n\nexport default ItemPanel\n","import React, { Fragment } from 'react'\nimport ItemInput from './ItemInput'\nimport ItemPanel, { useItems } from './item-panel'\n\nconst App = () => {\n  const [items, deleteItem, addItem] = useItems()\n  return (\n    <Fragment>\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">Add your things here</h1>\n          <ItemInput {...{ addItem }} />\n        </div>\n      </section>\n      <ItemPanel {...{ items, deleteItem }} />\n    </Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}